Memcached是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载. 
它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态、数据库驱动网站的速度.
 
   Memcached基于一个存储键/值对的hashmap。
   
    Redis是一个key-value存储系统，和Memcached类似。但是它支持存储的value类型相对更多，
   包括string(字符串)、 list(链表)、set(集合)、zset(sorted set --有序集合)和hashs（哈希类型）。
   这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都 是原子性的。在此基础上，redis支持各种不同方式的排序。
   与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期 性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，
   并且在此基础上实现了master-slave(主从)同步。
   Redis是一个高性能的key-value数据库。redis的出现，很大程度补偿了memcached这类key/value存储的不足，
    在部 分场合可以对关系数据库起到很好的补充作用。它提供了Python，Ruby，Erlang，PHP客户端，使用很方便.
   
    下面主要介绍一下Redis与Memcached的不同。

　　1.网络IO模型
    Memcached是多线程，非阻塞IO复用的网络模型，分为监听主线程和worker子线程，监听线程监听网络连接，接受请求后，将连接描述字pipe 传递给worker线程，
    进行读写IO, 网络层使用libevent封装的事件库，多线程模型可以发挥多核作用，但是引入了cache coherency和锁的问题，
    比如，Memcached最常用的stats 命令，
    实际Memcached所有操作都要对这个全局变量加锁，进行计数等工作，带来了性能损耗。
    Redis使用单线程的IO复用模型，自己封装了一个简单的AeEvent事件处理框架，主要实现了epoll、kqueue和select，
    对于单纯只 有IO操作来说，单线程可以将速度优势发挥到最大，但是Redis也提供了一些简单的计算功能，比如排序、聚合等，对于这些操作，
    单线程模型实际会严重影 响整体吞吐量，CPU计算过程中，整个IO调度都是被阻塞住的。
    
    2.内存管理方面
    Memcached使用预分配的内存池的方式，使用slab和大小不同的chunk来管理内存，Item根据大小选择合适的chunk存储，
    内存池的方式可以省去申请/释放内存的开销，并且能 减小内存碎片产生，但这种方式也会带来一定程度上的空间浪费，并且在内存仍然有很大空间时，
    新的数据也可能会被剔除，原因可以参考Timyang的文 章：http://timyang.net/data/Memcached-lru-evictions/
    Redis使用现场申请内存的方式来存储数据，并且很少使用free-list等方式来优化内存分配，会在一定程度上存在内存碎片，Redis跟据存储命 令参数，
    会把带过期时间的数据单独存放在一起，并把它们称为临时数据，非临时数据是永远不会被剔除的，即便物理内存不够，
    导致swap也不会剔除任何非临 时数据(但会尝试剔除部分临时数据)，这点上Redis更适合作为存储而不是cache。
　　3.数据一致性问题
    Memcached提供了cas命令，可以保证多个并发访问操作同一份数据的一致性问题。 
    Redis没有提供cas 命令，并不能保证这点，不过Redis提供了事务的功能，可以保证一串 命令的原子性，中间不会被任何操作打断。
　　4.存储方式及其它方面
    Memcached基本只支持简单的key-value存储，不支持枚举，不支持持久化和复制等功能
    Redis除key/value之外，还支持list,set,sorted set,hash等众多数据结构，提供了KEYS
　　进行枚举操作，但不能在线上使用，如果需要枚举线上数据，Redis提供了工具可以直接扫描其dump文件，枚举出所有数据，
  Redis还同时提供了持久化和复制等功能。
  
  5.关于不同语言的客户端支持
　　在不同语言的客户端方面，Memcached和Redis都有丰富的第三方客户端可供选择，不过因为Memcached发展的时间更久一些，
  目前看在 客户端支持方面，Memcached的很多客户端更加成熟稳定，而Redis由于其协议本身就比Memcached复杂，
  加上作者不断增加新的功能等，对 应第三方客户端跟进速度可能会赶不上，有时可能需要自己在第三方客户端基础上做些修改才能更好的使用。
　根据以上比较不难看出，当我们不希望数据被踢出，或者需要除key/value之外的更多数据类型时，或者需要落地功能时，使用Redis比使用Memcached更合适。
 
 
 　关于Redis的一些周边功能
    Redis除了作为存储之外还提供了一些其它方面的功能，比如聚合计算、pubsub、scripting等，对于此类功能需要了解其实现原理，
    清楚地了解到它的局限 性后，才能正确的使用，比如pubsub功能，这个实际是没有任何持久化支持的，
    消费方连接闪断或重连之间过来的消息是会全部丢失的，又比如聚合计算和 scripting等功能受Redis单线程模型所限，
    是不可能达到很高的吞吐量的，需要谨慎使用。
　　总的来说Redis作者是一位非常勤奋的开发者，可以经常看到作者在尝试着各种不同的新鲜想法和思路，针对这些方面的功能就要求我们需要深入了解后再使用。
　　总结：
　　1.Redis使用最佳方式是全部数据in-memory。
　　2.Redis更多场景是作为Memcached的替代者来使用。
　　3.当需要除key/value之外的更多数据类型支持时，使用Redis更合适。
　　4.当存储的数据不能被剔除时，使用Redis更合适。
  
  
  
  
  
